# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

[project]
name = "apache-tvm-ffi"
version = "0.1.0.b20"
description = "tvm ffi"

authors = [{ name = "TVM FFI team" }]
readme = "README.md"
license = { text = "Apache 2.0" }
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
]
keywords = ["machine learning", "inference"]
requires-python = ">=3.8"
dependencies = ["typing-extensions>=4.5"]

[project.urls]
Homepage = "https://github.com/apache/tvm-ffi"
GitHub = "https://github.com/apache/tvm-ffi"

[project.optional-dependencies]
# setup tools is needed by torch jit for best perf
torch = ["torch", "setuptools", "ninja"]
cpp = ["ninja"]
# note pytorch does not yet ship with 3.14t
test = ["pytest", "numpy", "ninja", "torch; python_version < '3.14'"]

[dependency-groups]
dev = [
  "ruff",
  "mypy",
  "clang-format",
  "clang-tidy",
  "ipdb",
  "ipython",
  "ninja",
  "pre-commit",
  "pytest",
  "numpy",
  "ml_dtypes",
  "cython",
  "cmake",
  "scikit-build-core",
]
docs = [
  "autodocsumm",
  "breathe",
  "exhale",
  "linkify-it-py",
  "matplotlib",
  "myst-parser",
  "nbconvert",
  "nbsphinx",
  "nbstripout",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-book-theme",
  "sphinx-copybutton",
  "sphinx-design",
  "sphinx-reredirects==0.1.2",
  "sphinx-tabs==3.4.1",
  "sphinx-toolbox==3.4.0",
  "sphinx-autodoc-typehints",
  "sphinxcontrib-mermaid",
  "sphinxcontrib-napoleon==0.7",
  "sphinxcontrib_httpdomain==1.8.1",
  "setuptools<81",
  "tomli",
  "urllib3>=2.5.0",
]

[project.scripts]
tvm-ffi-config = "tvm_ffi.config:__main__"
tvm-ffi-stubgen = "tvm_ffi.stub.stubgen:__main__"

[build-system]
requires = ["scikit-build-core>=0.10.0", "cython", "cmake>=3.18", "ninja"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
wheel.py-api = "cp312"
minimum-version = "build-system.requires"
ninja.version = ">=1.11"
ninja.make-fallback = false

# Build configuration
build-dir = "build"
build.verbose = true

# Editable install configuration
editable.rebuild = false
editable.verbose = true

# CMake configuration
cmake.version = "CMakeLists.txt"
cmake.build-type = "Release"
cmake.args = [
  "-DTVM_FFI_ATTACH_DEBUG_SYMBOLS=ON",
  "-DTVM_FFI_BUILD_TESTS=OFF",
  "-DTVM_FFI_BUILD_PYTHON_MODULE=ON",
]

# Logging
logging.level = "INFO"

# Wheel configuration
wheel.packages = ["python/tvm_ffi"]
wheel.install-dir = "tvm_ffi"

# Source distribution configuration
sdist.include = [
  # Build files
  "/CMakeLists.txt",
  "/pyproject.toml",
  "/cmake/**/*",
  # Source code
  "/src/**/*.cc",
  "/include/**/*",

  # python and cython
  "/python/tvm_ffi/**/*.py",
  "/python/tvm_ffi/**/*.pyx",
  "/python/tvm_ffi/**/*.pyi",
  "/python/tvm_ffi/py.typed",

  # Third party files
  "/3rdparty/libbacktrace/**/*",
  "/3rdparty/dlpack/include/*/*",

  # Documentation and metadata
  "/docs/**/*",
  "/LICENSE",
  "/README.md",
  "/NOTICE",

  # Tests
  "/tests/**/*",
]

sdist.exclude = [
  "**/.git",
  "**/.github",
  "**/__pycache__",
  "**/*.pyc",
  "build",
  "dist",
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
include = ["python/**/*.py", "tests/**/*.py"]
line-length = 100
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
select = [
  "UP",  # pyupgrade, https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "PL",  # pylint, https://docs.astral.sh/ruff/rules/#pylint-pl
  "I",   # isort, https://docs.astral.sh/ruff/rules/#isort-i
  "RUF", # ruff, https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
  "NPY", # numpy, https://docs.astral.sh/ruff/rules/#numpy-specific-rules-npy
  "F",   # pyflakes, https://docs.astral.sh/ruff/rules/#pyflakes-f
  "FA",  # flake8-future-annotations, https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
  "ANN", # flake8-annotations, https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "PTH", # flake8-use-pathlib, https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "D",   # pydocstyle, https://docs.astral.sh/ruff/rules/#pydocstyle-d
]
ignore = [
  "PLR2004", # pylint: magic-value-comparison
  "ANN401",  # flake8-annotations: any-type
  "D203",    # pydocstyle: incorrect-blank-line-before-class
  "D213",    # pydocstyle: multi-line-summary-second-line
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # pyflakes: unused-import
"tests/*" = [
  "E741", # pycodestyle: ambiguous-variable-name
  "D100", # pydocstyle: undocumented-public-module
  "D101", # pydocstyle: undocumented-public-class
  "D103", # pydocstyle: undocumented-public-function
  "D107", # pydocstyle: undocumented-public-init
  "D205", # pydocstyle: missing-blank-line-after-summary
]

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.cibuildwheel]
build-verbosity = 1
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"

# only build up to cp312, cp312
# will be abi3 and can be used in future versions
# ship 314t threaded nogil version
build = ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp314t-*"]
skip = ["*musllinux*", "cp38-macosx_*"]
# we only need to test on cp312
test-skip = ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
# focus on testing abi3 wheel
build-frontend = "build[uv]"
test-command = "pytest {package}/tests/python -vvs"
test-extras = ["test"]

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.14" }

[tool.cibuildwheel.windows]
archs = ["AMD64"]

[tool.mypy]
python_version = "3.9"
show_error_codes = true
mypy_path = ["python", "examples", "tests/python"]
files = ["python/tvm_ffi", "examples", "tests/python"]
namespace_packages = true
explicit_package_bases = true
allow_redefinition = true
exclude = '''(?x)(
  ^\.venv/|
  ^build/|
  ^dist/|
  ^\.mypy_cache/
)'''

[[tool.mypy.overrides]]
module = ["torch", "torch.*", "my_ffi_extension", "my_ffi_extension.*"]
ignore_missing_imports = true

[tool.uv.dependency-groups]
docs = { requires-python = ">=3.13" }
